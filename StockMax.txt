//https://www.hackerrank.com/challenges/stockmax/problem
import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

class Result {

    /*
     * Complete the 'stockmax' function below.
     *
     * The function is expected to return a LONG_INTEGER.
     * The function accepts INTEGER_ARRAY prices as parameter.
     */

    public static long stockmax(List<Integer> prices) {
        long sum = 0;
        int max = Integer.MIN_VALUE;
        List<Integer> maxFar = new ArrayList<>();
        for(int i = prices.size() -1 ; i >= 0; --i){
            max = Math.max(max, prices.get(i));
            maxFar.add(max);
        }
        Collections.reverse(maxFar);
        for(int x = 0; x < prices.size(); x++){
            if(maxFar.get(x) != prices.get(x)){
                sum += maxFar.get(x) - prices.get(x);
            }
        }


        return sum;
    }
    public static boolean verifyBuy(List<Integer> prices, int index){
        for(int x = index+1 ; x < prices.size(); x++){
            if(prices.get(index) < prices.get(x))
                return true;
        }
        return false;
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int t = Integer.parseInt(bufferedReader.readLine().trim());

        for (int tItr = 0; tItr < t; tItr++) {
            int n = Integer.parseInt(bufferedReader.readLine().trim());

            String[] pricesTemp = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

            List<Integer> prices = new ArrayList<>();

            for (int i = 0; i < n; i++) {
                int pricesItem = Integer.parseInt(pricesTemp[i]);
                prices.add(pricesItem);
            }

            long result = Result.stockmax(prices);

            bufferedWriter.write(String.valueOf(result));
            bufferedWriter.newLine();
        }

        bufferedReader.close();
        bufferedWriter.close();
    }
}
